package classes{	import flash.errors.*;	import flash.events.*;	import flash.net.Socket;		class CustomSocket extends Socket {			    public var response:String;	    public var connectOK:Boolean;	    public var myHost:String;	    public var myPort:uint;		    public function CustomSocket(host:String = null, port:uint = 0) {	        super();	        	        //-- init variables ---------	        connectOK 	= false;	        myHost 		= host;	        myPort 		= port;	        response = "";	        	        //-- les listeners ---------	        configureListeners();	        	        //-- connexion au serveur ---------	        reconnect();	        	    }	    //-- fonction appelée régulièrement si la connexion du flash échoue 	    //   par exemple si Processing n'est pas encore en train de tourner	    public function reconnect():void {	        if (myHost && myPort)  {	            super.connect(myHost, myPort);	        }	    }		    private function configureListeners():void {	        addEventListener(Event.CLOSE, closeHandler);	        addEventListener(Event.CONNECT, connectHandler);	        addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);	        addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);	        addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);	    }		    public function writeln(str:String):void {	        str += "\n";	        try {	            writeUTFBytes(str);	        }	        catch(e:IOError) {	            trace(e);	        }	    }	    public function sendTest():void {	        //trace("sendTest");	        response = "";	        writeln("Test /");	        flush();	    }	    public function sendDebut(vSequence:int):void {	        //trace("sendDebut");	        response = "";	        writeln("start"+vSequence);	        flush();	    }	    public function interrogeClient(vClient:int):void {	        //trace("interrogeClient");	        response = "";	        writeln(vClient+" is alive ?");	        flush();	    }	    public function envoiCommande(vCom:String):void {	        //trace("interrogeClient");	        response = "";	        writeln(vCom);	        flush();	    }	    	    	    public function sendIsAlive(vClient:int):void {	        //trace("sendTest");	        response = "";	        writeln(vClient+" is alive!");	        flush();	    }		    private function sendRequest():void {	        //trace("sendRequest");	        response = "";	        //writeln("GET /");	        flush();	    }		    private function readResponse():void {	        var str:String = readUTFBytes(bytesAvailable);	        response = str;	        globals.ChangeResponse=true;	        //response += str;	        //trace("reponse : " + response.toString());	    }		    private function closeHandler(event:Event):void {	        trace("closeHandler: " + event);	        connectOK = false;	    }		    private function connectHandler(event:Event):void {		    connectOK = true;	        trace("connectHandler: " + event);	        sendRequest();	    }		    private function ioErrorHandler(event:IOErrorEvent):void {	        trace("ioErrorHandler: " + event);	    }		    private function securityErrorHandler(event:SecurityErrorEvent):void {	        trace("securityErrorHandler: " + event);	    }		    private function socketDataHandler(event:ProgressEvent):void {	        //trace("socketDataHandler: " + event);	        readResponse();	    }	}}