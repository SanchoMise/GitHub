package classes {		import flash.display.Sprite;	import flash.display.MovieClip;	 	import flash.events.*;	import flash.utils.*;	import flash.ui.Keyboard;	import flash.events.MouseEvent; 		import flash.net.URLRequest;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.net.URLLoader;	import flash.events.IOErrorEvent;	import flash.system.fscommand;  	import flash.ui.Mouse; 	  		import flash.system.ImageDecodingPolicy;	import flash.geom.ColorTransform;		import com.adobe.images.JPGEncoder;	import com.adobe.images.BMPEncoder;	    import flash.display.Bitmap;    import flash.display.BitmapData;		import flash.display.PixelSnapping;	import flash.net.navigateToURL;	import flash.net.*;    	public class main extends MovieClip {		 		// ----------------------------------		// -- variables 		// ----------------------------------		private var _loader:URLLoader = new URLLoader();		private var _request:URLRequest;		private var _imageloader1:Loader = new Loader();		private var _imageloader2:Loader = new Loader();         		private var pLoader:URLLoader; 			// pour init		private var pXML:XML; 			private var pXMLtweets:XML; 			        private var pTabId:Array;		protected var _Fige:Bitmap;          					private var pTempo:Number;		private var pDelai:Number;		private var pDelaiRotation:Number;						public var pServeur:String;	    public var mysocket:CustomSocket;	    public var myDelai:Number;	    public var myTimer:Number;	    public var pOldReponse:String="";				public var pDossier:String;				public var pEnCours:Boolean=false;		public var pIndice:int=1;		public var pNbCams:int=8;				  	private var serverPath:String;		// ----------------------------------		// -- constructeur 		// ----------------------------------		public function main() {			//fscommand("fullscreen", "true"); 	        flash.system.Security.allowDomain("*");						//-- variables locales -------------------------			var vXML_URL:String;        	var vXML_URLRequest:URLRequest;        	        	//-- chargement du xml de parametrage --------			vXML_URL 		= "./xmls/parametres.xml"; 			vXML_URLRequest	= new URLRequest(vXML_URL); 						pXML 		= new XML(); 			pLoader 	= new URLLoader(vXML_URLRequest);			 			pLoader.addEventListener("complete", xmlParamLoaded);					}        //-------------------------------------        //-- fin de lecture xml Param : lecture arbo        //-------------------------------------		private function xmlParamLoaded(event:Event):void 		{        			    //-- alimentation des proprietes ------		    pXML 	= XML(pLoader.data); 			pLoader.removeEventListener("complete", xmlParamLoaded); 						pTempo = getTimer();					        // -- init ----			pServeur    = String(pXML.SERVEURSOCKET.IP);			serverPath  = String(pXML.SERVEURWEB);			pNbCams		= Number(pXML.NBCAMERAS);	        myDelai     = 2000;	        myTimer     = getTimer();	        pOldReponse = "";	                    mysocket = new CustomSocket(pServeur,  Number(pXML.SERVEURSOCKET.PORT)); // 	            			this.addEventListener( Event.ENTER_FRAME, EnterHandler );			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler); 			pageGauche.addChild(_imageloader1);			pageDroite.addChild(_imageloader2);			_imageloader1.x=0;//(-100);			_imageloader2.x=0;//+100;(1152/2)			//setChildIndex(controle,numChildren-1);						pDossier="";		}		private function Charge1():void 		{ 			var vTimer:Number = getTimer();			var vPage:int;						controle.text="Chargement : "+pDossier+"-img"+pIndice+".jpg";										_request = new URLRequest("./PRiSMserveur/PRiSM-"+pDossier+"/img"+pIndice+".jpg");			_imageloader1.load(_request);			_imageloader1.contentLoaderInfo.addEventListener(Event.COMPLETE, charge1Loaded);			_imageloader1.contentLoaderInfo.addEventListener(ErrorEvent.ERROR, loadError1);			_imageloader1.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadError1);		}				private function loadError1(e:Event):void		{				trace("erreur1");		}						private function charge1Loaded(event:Event):void 		{			controle.text="Envoi sur serveur : "+pDossier+"-img"+pIndice+".jpg";			var a:BitmapData = new BitmapData(640,480);			_Fige = new Bitmap(a);			a.draw(pageGauche);			createJPG(_Fige, 100, pDossier+"-img"+pIndice+".jpg");		}				////////////////////////////////////////////////////////////////////////////////////		// Creating JPG Image		////////////////////////////////////////////////////////////////////////////////////		private function createJPG(m:Bitmap, q:Number, fileName:String="snapshot.jpg")		{			//serverUniqueFileName=fileName;			var jpgSource:BitmapData = new BitmapData (320,240);//(m.width, m.height);			jpgSource.draw(m.bitmapData);			var jpgEncoder:JPGEncoder = new JPGEncoder(q);			var jpgStream:ByteArray = jpgEncoder.encode(jpgSource);			var derdesder;						var header:URLRequestHeader = new URLRequestHeader ("Content-type", "application/octet-stream");			//var serverPath:String="http://workshop-anabole.com/gaite/";			if (pIndice==pNbCams){				derdesder = pDossier;				controle.text="DerdesDer : "+pDossier;			}else{				derdesder = "non";			}			var jpgURLRequest:URLRequest = new URLRequest (serverPath+"enregistreMedia.php?fileName=" + fileName + "&dirName=photos&derdesder=" +derdesder );					trace(serverPath+"enregistreMedia.php?fileName=" + fileName + "&dirName=photos&derdesder=" +derdesder);						jpgURLRequest.requestHeaders.push(header);							jpgURLRequest.method = URLRequestMethod.POST;							jpgURLRequest.data = jpgStream;									var jpgURLLoader:URLLoader = new URLLoader();			jpgURLLoader.dataFormat = URLLoaderDataFormat.VARIABLES;			jpgURLLoader.addEventListener( Event.COMPLETE, imageUrlLoaderComplete );			jpgURLLoader.addEventListener( IOErrorEvent.IO_ERROR, sendIOError );			jpgURLLoader.load( jpgURLRequest );		}		//Fired when URL Loading Complete		private function imageUrlLoaderComplete(evt:Event)		{			var write = evt.target.data.write;			saveIncremental();		}				private function sendIOError(event:Event)		{			trace("Error occured in image");			saveIncremental();		}			    private function saveIncremental():void {			var vAstuce:String = astuceDate();						if (pIndice<pNbCams){				pIndice=pIndice+1;				Charge1();			}else{				// terminé			}			/*			// l'url ---------------------			_request = new URLRequest(serverPath+"saveBDD.php?astuce="+vAstuce);						// mehtod en POST -------------			_request.method = URLRequestMethod.POST;						var variables:URLVariables = new URLVariables();						//-- liste de toutes les variables			variables.lemail 		= oc_email.text;			variables.ladate 		= DateSave();			variables.letexte	    = oc_texte.text;			variables.limage	    = serverUniqueFileName;						_request.data = variables;						// on lance le chargement ---------			_loader.addEventListener(Event.COMPLETE, SaveComplete);			try {                _loader.load(_request);            } catch (error:Error) {	            trace("erreur");                SaveCompletefin();            }			*/	    }				//-------------------------------------------	   		private function SaveComplete(evt:Event)		{			_loader.removeEventListener("complete", SaveComplete); 			SaveCompletefin();		}				private function SaveCompletefin()		{									//pTimerBoucle = getTimer();					}				//-------------------------------------------	           public function astuceDate():String{			var now:Date = new Date();			var vMois:String=formate(now.getUTCMonth()+1);			var vJour:String=formate(now.getUTCDate());			var vYear:String=formate(now.getFullYear());			var vHH:String=	formate(now.getHours());			var vMN:String=	formate(now.getMinutes());			var vSS:String=	formate(now.getSeconds());/**/			return vYear+vMois+vJour+vHH+vMN+vSS;        }		//-------------------------------------------	           public function DateReception():String{			var now:Date = new Date();			var vMois:String=formate(now.getUTCMonth()+1);			var vJour:String=formate(now.getUTCDate());			var vYear:String=formate(now.getFullYear()+50);			var vHH:String=	formate(now.getHours());			var vMN:String=	formate(now.getMinutes());			//var vSS:String=	formate(now.getSeconds());/**/			//return vJour+"-"+vMois+"-"+vYear+" à "+vHH+":"+vMN+":"+vSS;			return vJour+"-"+vMois+"-"+vYear+" à "+vHH+":"+vMN;        }		//-------------------------------------------	           public function DateSave():String{			var now:Date = new Date();			var vMois:String=formate(now.getUTCMonth()+1);			var vJour:String=formate(now.getUTCDate());			var vYear:String=formate(now.getFullYear()+50);			var vHH:String=	formate(now.getHours());			var vMN:String=	formate(now.getMinutes());			var vSS:String=	formate(now.getSeconds());/**/			return vYear+"-"+vMois+"-"+vJour+" "+vHH+":"+vMN+":"+vSS;        }		//-------------------------------------------	           public function formate(vNum:Number):String{	        var vString:String;	        vString = String(vNum);	        if (vString.length==1){		        vString= "0"+vString;	        }else{	        }	        return vString;	                  }		//-------------------------------------------	   		private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }        private function openHandler(event:Event):void {            //trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            //trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            //trace("securityErrorHandler: " + event);            SaveCompletefin();        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            //trace("httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);            SaveCompletefin();        }		//-------------------------------------------		// enterframe ----------------------		//-------------------------------------------		private function EnterHandler(MonEvent:Event):void		{							var vTimer:Number;			var vText, vPrefixe:String;			var vNb,i:int;						//-------------------			vTimer = getTimer();				//-- --------------			// socket			//-------------------				if (mysocket.connectOK==false){										if (vTimer-myTimer>myDelai){						myTimer = vTimer;						mysocket.reconnect();												//if (pTest==1){							controle.text="tentative : "+vTimer+" millisecondes";						//}else{						//}											}else{					}				}else{					if (mysocket.response==""){											}else{												if (pEnCours==true){							controle.text="Clic invalide car process en cours : "+pDossier+"-img"+pIndice+".jpg";						}else{							pOldReponse=mysocket.response;														pDossier    = mysocket.response;							pIndice     = 1;							pEnCours    = true;														//pDossier    = "16_14_32_35";														Charge1();						}																		mysocket.response="";					}				}										}		       private function keyDownHandler(event:KeyboardEvent):void {		    var vNom:String;		    var vVideo:String;		    var vTabNom:Array;			var vNum:int;						trace(event.keyCode);			controle.text="touche"+event.keyCode;						switch(event.keyCode){			    case Keyboard.LEFT: //:			    break;			    case Keyboard.RIGHT: //:			    break;			    case Keyboard.UP: //:			    break;			    case Keyboard.DOWN: //:			    break;			    case 65: //: A					//Charge1();			    break;			    case 90: //: A					//Charge1();			    break;			    case 69: //: A					//Charge1();			    break;		    }		    							        						switch(event.charCode){			    case 43: //:			    break;			    case 45: //:			    break;			    case 51: //:			    break;			    case 52: //:				    break;			    case 53: //:			    break;			    case 54: //:			    break;						    }							    /*			vNum=1;		    vTabNom = new Array("etang.mov","melancolie.mov");		    		    vVideo=vTabNom[vNum];		    		    globals.LaVideo = vVideo;// + ".flv";		    globals.Ecran = "declencheVideo";		    		    globals.pTemposRetour = getTimer();		    globals.pTempo = getTimer();			*/	   }							}}